               ; KCPSM6 Program
               ;Author         - Vikram & Chethan
               ;revised in Fall 2020, Spring 2021  - Gandhi 10/3/2020, 3/14/2021
               ;File     - prom_divider_8.psm (copy of prom_divider_4.psm for students to revise)
               ;**************************************************************************************
               ;Port definitions
               ;**************************************************************************************
               ; ********* TODO *********
               ; You need three read ports instead of two read ports.
               ; You need three write ports instead of two write ports.
               ; Change the following 4 lines appropriately
               CONSTANT Dividend_port, 00000001'b
               CONSTANT Divisor_port, 00000010'b
               CONSTANT Control_signal_port, 00000011'b
               CONSTANT Quotient_port, 00000001'b
               CONSTANT Remainder_port, 00000010'b
               CONSTANT Current_State_port, 00000011'b
               ;                   CONSTANT Dividend_Divisor_port,   00'd    ;port00 used for loading info of Dividend and Divisor
               ;                   CONSTANT Control_signal_port,     01'd   ;port01 used for loading info of Start and ACK signals
               ;                   CONSTANT Quotient_Remainder_port, 00'd   ;port00 used for outputting Quotient and Remainder ;
               ;        CONSTANT Current_State_port,      01'd   ;port01 used for outputting current state info (Done (QD), Compute (QC), Initial (QI), and Done) to LEDs
               ; Current State format from divider_8_top.v
               ;   Done <= out_port[0];
               ;   Qi <= out_port[1];
               ;   Qc <= out_port[2];
               ;   Qd <= out_port[3];
               CONSTANT Report_Qi, 00000010'b
               CONSTANT Report_Qc, 00000100'b
               CONSTANT Report_Qd_Done, 00001001'b
               ; ********* TODO *********
               ; Change the following two lines appropriately
               ; Control signal format from divider_4_top.v
               ;           1'b1 : in_port <= {6'b000000,Start,Ack};
               CONSTANT Mask_to_check_Start, 00000010'b
               CONSTANT Mask_to_check_Ack, 00000001'b
               ;**************************************************************************************
               ; Special Register usage
               ;**************************************************************************************
               ;NAMEREG Not used here (reference page 53 in User guide Picoblaze_KCPSM6_Release9_30Sept14)
               ;   One could rename registers as shown below, but I felt, it is not good to rename everything.
               ;NAMEREG s0 Dividend_port
               ;NAMEREG s1 Divisor_port
               ;NAMEREG s2 Control_signal_port
               ;NAMEREG s3 Quotient_port
               ;NAMERED s4 Remainder_port
               ;NAMEREG s5 Current_State_port
               ;**************************************************************************************
               ;MAIN PROGRAM
               ;**************************************************************************************
               ; ********* TODO *********
               ; Go through the code for each of the three states and revise them appropriately.
               ; Since you do not need to concatenate two 4-bit items here, probably you do not need
               ; "OR" instruction or the sA register in this .psm file.
               ; Try to use s0 for Dividend, s1 for Divisor, s2 for Quotient and s4 for Control
               ;Control Signal Format in s4 {6'b000000, Start, Ack}
               ; state_initial: OUTPUTK Report_Qi, Current_State_port  ; Indicating Current State as Initial State (QI)
               ;       INPUT s0, Dividend_Divisor_port   ; Register s0 holds Dividend(X), Divisor(Y)
               ;       LOAD s1,s0        ; Make a copy of XY in Register s1
               ;       AND s1,0F                       ; Extracting Divisor using mask 00001111 to get 0Y in s1
               ;       AND s0,F0              ; Extracting Dividend using mask 11110000 to get X0 in s0
               ;       SR0 s0         ; SR0 >> XXXX 0000 -> 0XXX X000  Right shift Operation
               ;       SR0 s0         ; SR0 >> 0XXX X000 -> 00XX XX00
               ;       SR0 s0         ; SR0 >> 00XX XX00 -> 000X XXX0
               ;       SR0 s0                     ; SR0 >> 000X XXX0 -> 0000 XXXX - s0 has value 0X (the Dividend)
               ;       LOAD s2,00        ; Quotient Counter in the upper 4 bits of s2
               ;       OUTPUT s0, Quotient_Remainder_port  ; Sending out initial Quotient and Remainder (Dividend(X)) to fabric logic
               ;       INPUT s4, Control_signal_port   ; Load the Control Signal Information into register s4
               ;       AND s4, Mask_to_check_Start    ; Check to see if Start Control Signal is set using 00000010'b Mask
               ;       JUMP Z, state_initial      ; Jump back to state_initial if Start signal did not go active
               ;       JUMP state_compute      ; Jump to Compute State if Start (BtnL) is pressed
state_initial: OUTPUTK Report_Qi, Current_State_port      ;
               INPUT s0, Dividend_port                    ;
               INPUT s1, Divisor_port                     ;
               INPUT s2, Control_signal_port              ;
               LOAD s3, 00                                ;
               LOAD s4, 00                                ;
               OUTPUT s3, Quotient_port                   ;
               OUTPUT s4, Remainder_port                  ;
               OUTPUT s5, Current_State_port              ;
               AND s2, Mask_to_check_Start                ;
               JUMP Z, state_initial                      ;
               JUMP state_compute                         ;
               ;***************************************************************************************
               ;Compute State (Division Sequence)
               ;****************************************************************************************
               ; state_compute: OUTPUTK Report_Qc, Current_State_port   ; Indicating Current State as Compute State (QC)
               ;       LOAD sA,s2        ; Make a copy of quotient in the upper 4 bits of s2 in Register sA
               ;       OR  sA, s0        ; Merge Quotient_Remainder into sA for reporting to the top design
               ;       OUTPUT sA, Quotient_Remainder_port  ; Sending out Quotient and Remainder (Dividend(X)) to the fabric logic
               ;       COMPARE s0, s1       ; Compare Dividend and Divisor to check if Dividend is smaller than Divisor
               ;       JUMP C, state_done      ; If Dividend is smaller, jump to Done State (QD)
               ;       SUB s0, s1        ; Subtract Divisor from Dividend
               ;       ADD s2, 10        ; Increment Quotient (in the upper fours bits of s2) after each repetitive Subtraction by adding 0001_0000 ( = 16) to s2
               ;       JUMP state_compute      ; If Dividend is not smaller, stay in Compute State (QC)
state_compute: OUTPUTK Report_Qc, Current_State_port      ; Indicating Current State as Compute State (Qc)
               ;       LOAD sA, s3        ; Loading Quotient into temporary storage sA
               ;       LOAD sB, s4        ; Loading Remainder into temporary storage sB
               OUTPUT s3, Quotient_port                   ; Sending out Quotient to fabric logic
               OUTPUT s4, Remainder_port                  ; Sending out Remainder to fabric logic
               COMPARE s0, s1                             ; if Dividend smaller than Divisor
               JUMP C, state_done                         ;  then jump to Done State (Qd)
               SUB s0, s1                                 ; else subtract Divisor from Dividend
               ADD s3, 01                                 ;  add 1 to the Quotient
               JUMP state_compute                         ;  and come back to Compute State (Qc)
               ;****************************************************************************************
               ;Done State
               ;****************************************************************************************
               ; state_done:    OUTPUTK Report_Qd_Done, Current_State_port ; Indicating Current State as Done State and also the Done signal (QD, Done)
               ;       LOAD sA,s2        ; Make a copy of quotient in the upper 4 bits of s2 in Register sA
               ;       OR  sA, s0        ; Merge Quotient_Remainder into sA for reporting to the top design
               ;       OUTPUT sA, Quotient_Remainder_port  ; Sending out Quotient and Remainder to the fabric logic
               ;       INPUT s4, Control_signal_port   ; Load the Control Signal Information into register s4
               ;       AND s4, Mask_to_check_Ack    ; Check to see if ACK is received
               ;       JUMP Z, state_done      ; Jump to state_initial if ACK is received
               ;       JUMP state_initial      ; Stay in Done State till ACK comes (until BtnR is pressed)
   state_done: OUTPUTK Report_Qd_Done, Current_State_port ;
               ;       LOAD sA, s3         ;
               ;       LOAD sB, s0         ;
               OUTPUT s3, Quotient_port                   ;
               OUTPUT s4, Remainder_port                  ;
               INPUT s2, Control_signal_port              ;
               AND s2, Mask_to_check_Ack                  ;
               JUMP Z, state_done                         ;
               JUMP state_initial                         ;
               ;**************************************************************************************
               ;Interrupt Vector
               ;**************************************************************************************
               ;Not used here
               ;ADDRESS 3FF
