KCPSM6 Assembler log file for program 'C:\Users\gangh\Desktop\EE354\Lab 9\Divider_Pico_N4_8bit\assembly\prom_divider_8.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 26 Oct 2022
Assembly timestamp: 19:24:59

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 01A hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 27
Memory locations available: 4069


Assembly listing

 Addr Code                  Instruction

 000                        ; KCPSM6 Program
 000                        ;Author         - Vikram & Chethan
 000                        ;revised in Fall 2020, Spring 2021  - Gandhi 10/3/2020, 3/14/2021
 000                        ;File     - prom_divider_8.psm (copy of prom_divider_4.psm for students to revise)
 000                        ;**************************************************************************************
 000                        ;Port definitions
 000                        ;**************************************************************************************
 000                        ; ********* TODO *********
 000                        ; You need three read ports instead of two read ports.
 000                        ; You need three write ports instead of two write ports.
 000                        ; Change the following 4 lines appropriately
 000                        CONSTANT Dividend_port, 00000001'b
 000                        CONSTANT Divisor_port, 00000010'b
 000                        CONSTANT Control_signal_port, 00000011'b
 000                        CONSTANT Quotient_port, 00000001'b
 000                        CONSTANT Remainder_port, 00000010'b
 000                        CONSTANT Current_State_port, 00000011'b
 000                        ;                   CONSTANT Dividend_Divisor_port,   00'd    ;port00 used for loading info of Dividend and Divisor
 000                        ;                   CONSTANT Control_signal_port,     01'd   ;port01 used for loading info of Start and ACK signals
 000                        ;                   CONSTANT Quotient_Remainder_port, 00'd   ;port00 used for outputting Quotient and Remainder ;
 000                        ;        CONSTANT Current_State_port,      01'd   ;port01 used for outputting current state info (Done (QD), Compute (QC), Initial (QI), and Done) to LEDs
 000                        ; Current State format from divider_8_top.v
 000                        ;   Done <= out_port[0];
 000                        ;   Qi <= out_port[1];
 000                        ;   Qc <= out_port[2];
 000                        ;   Qd <= out_port[3];
 000                        CONSTANT Report_Qi, 00000010'b
 000                        CONSTANT Report_Qc, 00000100'b
 000                        CONSTANT Report_Qd_Done, 00001001'b
 000                        ; ********* TODO *********
 000                        ; Change the following two lines appropriately
 000                        ; Control signal format from divider_4_top.v
 000                        ;           1'b1 : in_port <= {6'b000000,Start,Ack};
 000                        CONSTANT Mask_to_check_Start, 00000010'b
 000                        CONSTANT Mask_to_check_Ack, 00000001'b
 000                        ;**************************************************************************************
 000                        ; Special Register usage
 000                        ;**************************************************************************************
 000                        ;NAMEREG Not used here (reference page 53 in User guide Picoblaze_KCPSM6_Release9_30Sept14)
 000                        ;   One could rename registers as shown below, but I felt, it is not good to rename everything.
 000                        ;NAMEREG s0 Dividend_port
 000                        ;NAMEREG s1 Divisor_port
 000                        ;NAMEREG s2 Control_signal_port
 000                        ;NAMEREG s3 Quotient_port
 000                        ;NAMERED s4 Remainder_port
 000                        ;NAMEREG s5 Current_State_port
 000                        ;**************************************************************************************
 000                        ;MAIN PROGRAM
 000                        ;**************************************************************************************
 000                        ; ********* TODO *********
 000                        ; Go through the code for each of the three states and revise them appropriately.
 000                        ; Since you do not need to concatenate two 4-bit items here, probably you do not need
 000                        ; "OR" instruction or the sA register in this .psm file.
 000                        ; Try to use s0 for Dividend, s1 for Divisor, s2 for Quotient and s4 for Control
 000                        ;Control Signal Format in s4 {6'b000000, Start, Ack}
 000                        ; state_initial: OUTPUTK Report_Qi, Current_State_port  ; Indicating Current State as Initial State (QI)
 000                        ;       INPUT s0, Dividend_Divisor_port   ; Register s0 holds Dividend(X), Divisor(Y)
 000                        ;       LOAD s1,s0        ; Make a copy of XY in Register s1
 000                        ;       AND s1,0F                       ; Extracting Divisor using mask 00001111 to get 0Y in s1
 000                        ;       AND s0,F0              ; Extracting Dividend using mask 11110000 to get X0 in s0
 000                        ;       SR0 s0         ; SR0 >> XXXX 0000 -> 0XXX X000  Right shift Operation
 000                        ;       SR0 s0         ; SR0 >> 0XXX X000 -> 00XX XX00
 000                        ;       SR0 s0         ; SR0 >> 00XX XX00 -> 000X XXX0
 000                        ;       SR0 s0                     ; SR0 >> 000X XXX0 -> 0000 XXXX - s0 has value 0X (the Dividend)
 000                        ;       LOAD s2,00        ; Quotient Counter in the upper 4 bits of s2
 000                        ;       OUTPUT s0, Quotient_Remainder_port  ; Sending out initial Quotient and Remainder (Dividend(X)) to fabric logic
 000                        ;       INPUT s4, Control_signal_port   ; Load the Control Signal Information into register s4
 000                        ;       AND s4, Mask_to_check_Start    ; Check to see if Start Control Signal is set using 00000010'b Mask
 000                        ;       JUMP Z, state_initial      ; Jump back to state_initial if Start signal did not go active
 000                        ;       JUMP state_compute      ; Jump to Compute State if Start (BtnL) is pressed
 000  2B023  state_initial: OUTPUTK 02[Report_Qi], 3[Current_State_port]      ;
 001  09001                 INPUT s0, 01[Dividend_port]                       ;
 002  09102                 INPUT s1, 02[Divisor_port]                        ;
 003  09203                 INPUT s2, 03[Control_signal_port]                 ;
 004  01300                 LOAD s3, 00                                       ;
 005  01400                 LOAD s4, 00                                       ;
 006  2D301                 OUTPUT s3, 01[Quotient_port]                      ;
 007  2D402                 OUTPUT s4, 02[Remainder_port]                     ;
 008  2D503                 OUTPUT s5, 03[Current_State_port]                 ;
 009  03202                 AND s2, 02[Mask_to_check_Start]                   ;
 00A  32000                 JUMP Z, 000[state_initial]                        ;
 00B  2200C                 JUMP 00C[state_compute]                           ;
 00C                        ;***************************************************************************************
 00C                        ;Compute State (Division Sequence)
 00C                        ;****************************************************************************************
 00C                        ; state_compute: OUTPUTK Report_Qc, Current_State_port   ; Indicating Current State as Compute State (QC)
 00C                        ;       LOAD sA,s2        ; Make a copy of quotient in the upper 4 bits of s2 in Register sA
 00C                        ;       OR  sA, s0        ; Merge Quotient_Remainder into sA for reporting to the top design
 00C                        ;       OUTPUT sA, Quotient_Remainder_port  ; Sending out Quotient and Remainder (Dividend(X)) to the fabric logic
 00C                        ;       COMPARE s0, s1       ; Compare Dividend and Divisor to check if Dividend is smaller than Divisor
 00C                        ;       JUMP C, state_done      ; If Dividend is smaller, jump to Done State (QD)
 00C                        ;       SUB s0, s1        ; Subtract Divisor from Dividend
 00C                        ;       ADD s2, 10        ; Increment Quotient (in the upper fours bits of s2) after each repetitive Subtraction by adding 0001_0000 ( = 16) to s2
 00C                        ;       JUMP state_compute      ; If Dividend is not smaller, stay in Compute State (QC)
 00C  2B043  state_compute: OUTPUTK 04[Report_Qc], 3[Current_State_port]      ; Indicating Current State as Compute State (Qc)
 00D                        ;       LOAD sA, s3        ; Loading Quotient into temporary storage sA
 00D                        ;       LOAD sB, s4        ; Loading Remainder into temporary storage sB
 00D  2D301                 OUTPUT s3, 01[Quotient_port]                      ; Sending out Quotient to fabric logic
 00E  2D402                 OUTPUT s4, 02[Remainder_port]                     ; Sending out Remainder to fabric logic
 00F  1C010                 COMPARE s0, s1                                    ; if Dividend smaller than Divisor
 010  3A014                 JUMP C, 014[state_done]                           ;  then jump to Done State (Qd)
 011  18010                 SUB s0, s1                                        ; else subtract Divisor from Dividend
 012  11301                 ADD s3, 01                                        ;  add 1 to the Quotient
 013  2200C                 JUMP 00C[state_compute]                           ;  and come back to Compute State (Qc)
 014                        ;****************************************************************************************
 014                        ;Done State
 014                        ;****************************************************************************************
 014                        ; state_done:    OUTPUTK Report_Qd_Done, Current_State_port ; Indicating Current State as Done State and also the Done signal (QD, Done)
 014                        ;       LOAD sA,s2        ; Make a copy of quotient in the upper 4 bits of s2 in Register sA
 014                        ;       OR  sA, s0        ; Merge Quotient_Remainder into sA for reporting to the top design
 014                        ;       OUTPUT sA, Quotient_Remainder_port  ; Sending out Quotient and Remainder to the fabric logic
 014                        ;       INPUT s4, Control_signal_port   ; Load the Control Signal Information into register s4
 014                        ;       AND s4, Mask_to_check_Ack    ; Check to see if ACK is received
 014                        ;       JUMP Z, state_done      ; Jump to state_initial if ACK is received
 014                        ;       JUMP state_initial      ; Stay in Done State till ACK comes (until BtnR is pressed)
 014  2B093     state_done: OUTPUTK 09[Report_Qd_Done], 3[Current_State_port] ;
 015                        ;       LOAD sA, s3         ;
 015                        ;       LOAD sB, s0         ;
 015  2D301                 OUTPUT s3, 01[Quotient_port]                      ;
 016  2D402                 OUTPUT s4, 02[Remainder_port]                     ;
 017  09203                 INPUT s2, 03[Control_signal_port]                 ;
 018  03201                 AND s2, 01[Mask_to_check_Ack]                     ;
 019  32014                 JUMP Z, 014[state_done]                           ;
 01A  22000                 JUMP 000[state_initial]                           ;
 01B                        ;**************************************************************************************
 01B                        ;Interrupt Vector
 01B                        ;**************************************************************************************
 01B                        ;Not used here
 01B                        ;ADDRESS 3FF


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\gangh\Desktop\EE354\Lab 9\Divider_Pico_N4_8bit\assembly\prom_divider_8.psm



List of defined constants

 CONSTANT name       Value        Source PSM File

 timestamp_hours     19'd         
 timestamp_minutes   24'd         
 timestamp_seconds   59'd         
 datestamp_year      22'd         
 datestamp_month     10'd         
 datestamp_day       26'd         
 NUL                 00           
 BEL                 07           
 BS                  08           
 HT                  09           
 LF                  0A           
 VT                  0B           
 CR                  0D           
 ESC                 1B           
 DEL                 7F           
 DCS                 90           
 ST                  9C           
 Dividend_port       00000001'b   prom_divider_8.psm
 Divisor_port        00000010'b   prom_divider_8.psm
 Control_signal_port 00000011'b   prom_divider_8.psm
 Quotient_port       00000001'b   prom_divider_8.psm
 Remainder_port      00000010'b   prom_divider_8.psm
 Current_State_port  00000011'b   prom_divider_8.psm
 Report_Qi           00000010'b   prom_divider_8.psm
 Report_Qc           00000100'b   prom_divider_8.psm
 Report_Qd_Done      00001001'b   prom_divider_8.psm
 Mask_to_check_Start 00000010'b   prom_divider_8.psm
 Mask_to_check_Ack   00000001'b   prom_divider_8.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "26 Oct 2022"  
 timestamp$        "19:24:59"     



List of line labels

   Label           Addr  Source PSM File

   state_initial   000   prom_divider_8.psm
   state_compute   00C   prom_divider_8.psm
   state_done      014   prom_divider_8.psm



Instruction usage statistics

 Instruction    Instances

 LOAD              2
 STAR              -

 AND               2
 OR                -
 XOR               -

 ADD               1
 ADDCY             -
 SUB               1
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           1
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             4
 OUTPUT            7
 OUTPUTK           3

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              6
 JUMP@             -
 CALL              -
 CALL@             -
 RETURN            -
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
